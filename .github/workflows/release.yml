name: Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  crates-io:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/v')"
    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    - uses: actions-rs/cargo@v1
      with:
        command: package
        args: --allow-dirty
    - uses: actions-rs/cargo@v1
      with:
        command: publish
        args: --allow-dirty
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
  
  macos:
    name: Build for macOS
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
    
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: x86_64-apple-darwin
    
    - run: cargo install cargo-bundle
  
    - name: Build x86_64
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release --target x86_64-apple-darwin --all-features

    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: aarch64-apple-darwin

    - name: Build aarch64 (Apple Silicon)
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release --target aarch64-apple-darwin --all-features
    
    - name: Bundle .app
      run: cargo bundle --all-features --format osx --release

    - name: Create universal binary
      run: lipo -create -output target/release/bundle/osx/Merlon.app/Contents/MacOS/merlon target/x86_64-apple-darwin/release/merlon target/aarch64-apple-darwin/release/merlon
    
    - name: Install dmgbuild
      run: pip3 install dmgbuild
    
    - name: Build DMG
      run: cd assets/dmg && dmgbuild -s dmgbuild.json "Merlon" Merlon.dmg

    - uses: actions/upload-artifact@v3
      with:
        name: merlon-macos
        path: assets/dmg/Merlon.dmg

  linux:
    name: Build for Linux
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [x86_64]
    steps:
    - uses: actions/checkout@v2
  
    - name: Build x86_64
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release --target ${{ matrix.target }}-unknown-linux-gnu
  
    - uses: actions/upload-artifact@v3
      with:
        name: merlon-linux-${{ matrix.target }}
        path: target/${{ matrix.target }}-unknown-linux-gnu/release/merlon

  github_release:
    name: Create GitHub release
    runs-on: ubuntu-latest
    needs: [linux, macos]
    steps:
    - uses: actions/checkout@v2

    - name: Download artifacts from previous jobs
      uses: actions/download-artifact@v3
    
    - name: Rename artifacts
      run: |
        mkdir -p release
        mv merlon-linux-x86_64/merlon release/merlon-linux-x86_64
        mv merlon-macos/Merlon.dmg        release/Merlon.dmg

    - name: Get version from tag
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

    - name: Create release
      uses: "marvinpinto/action-automatic-releases@latest"
      if: "startsWith(github.ref, 'refs/tags/v')"
      with:
        repo_token: "${{ secrets.RELEASE_GITHUB_TOKEN }}"
        prerelease: false
        title: "${{ steps.get_version.outputs.VERSION }}"
        files: |
          release/*
          LICENSE
    
    - name: Create prerelease
      uses: "marvinpinto/action-automatic-releases@latest"
      if: "!startsWith(github.ref, 'refs/tags/')"
      with:
        repo_token: "${{ secrets.RELEASE_GITHUB_TOKEN }}"
        automatic_release_tag: "latest"
        prerelease: true
        title: "Development Build"
        files: |
          release/*
          LICENSE
