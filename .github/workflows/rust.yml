name: Rust

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable

    - uses: Swatinem/rust-cache@v1

    - name: Download base ROM
      run: curl -L $BASEROM_US_URL -o tests/baserom.z64
      env:
        BASEROM_US_URL: ${{ secrets.BASEROM_US_URL }}
    
    - name: Set git user for tests
      run: |
        git config user.name "GitHub Actions"
        git config user.email "merlongithubactions@nanaian.town"

    - name: Run tests
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --verbose --no-fail-fast
      env:
        RUST_BACKTRACE: full
        RUST_LOG: debug

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        components: clippy, rustfmt
        override: true
    - uses: actions-rs/cargo@v1
      with:
        command: check

  crates-io:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/v')"
    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    - uses: actions-rs/cargo@v1
      with:
        command: package
        args: --allow-dirty
    - uses: actions-rs/cargo@v1
      with:
        command: publish
        args: --allow-dirty
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
  
  macos:
    name: Build for macOS
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
    
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: x86_64-apple-darwin
  
    - name: Build x86_64
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release --target x86_64-apple-darwin --all-features

    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: aarch64-apple-darwin

    - name: Build aarch64 (Apple Silicon)
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release --target aarch64-apple-darwin --all-features

    - name: Create universal binary
      run: lipo -create -output target/release/merlon target/release/merlon-x86_64-apple-darwin target/release/merlon-aarch64-apple-darwin

    - run: ls -l target/release
    - uses: actions/upload-artifact@v3
      with:
        name: merlon-macos
        path: 
  
  linux:
    name: Build for Linux
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [x86_64]
    steps:
    - uses: actions/checkout@v2
  
    - name: Build x86_64
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release --target x86_64-unknown-linux-gnu --all-features
  
    - uses: actions/upload-artifact@v3
      with:
        name: merlon-linux-${{ matrix.target }}
        path: target/release/merlon

  github_prerelease:
    name: Create GitHub prerelease
    runs-on: ubuntu-latest
    if: "!startsWith(github.ref, 'refs/tags/v')"
    needs: [linux, macos]
    steps:
    - uses: actions/checkout@v2

    # download artifacts from previous steps
    - uses: actions/download-artifact@v3
      with:
        name: merlon-linux-x86_64
    - uses: actions/download-artifact@v3
      with:
        name: merlon-linux-aarch64
    - uses: actions/download-artifact@v3
      with:
        name: merlon-macos-x86_64
    - uses: actions/download-artifact@v3
      with:
        name: merlon-macos-aarch64

    # create release
    - uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.RELEASE_GITHUB_TOKEN }}"
        automatic_release_tag: "latest"
        prerelease: true
        title: "Development Build"
        files: |
          merlon-linux-x86_64
          merlon-linux-aarch64
          merlon-macos-x86_64
          merlon-macos-aarch64
          LICENSE
  
  github_release:
    name: Create GitHub release
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/v')"
    needs: [linux, macos]
    steps:
    - uses: actions/checkout@v2

    # download artifacts from previous steps
    - uses: actions/download-artifact@v3

    # create release
    - uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.RELEASE_GITHUB_TOKEN }}"
        prerelease: false
        title: "${{ github.ref }}"
        files: |
          merlon-linux-x86_64
          merlon-macos-x86_64
          merlon-macos-aarch64
          LICENSE
